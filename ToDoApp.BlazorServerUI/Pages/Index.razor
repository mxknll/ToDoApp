@page "/"

@inject IAssignmentRepository AssignmentRepository


<!--Add new task-->
<div class="input-group mb-3">
    <input @ref="textInput" type="text" class="form-control" placeholder="Add new task"
           @bind-value="newAssignmentText" @bind-value:event="oninput"
           @onkeyup="KeyboardEventHandler">
    <div class="input-group-append">
        <button type="submit" class="btn btn-success"
                @onclick="@(() => AddNewAssignment())" disabled="@(inputIsValid == false)"
                @onkeyup="KeyboardEventHandler">
            Add
        </button>
    </div>
</div>

<!--Tasks-->
@if (assignments is null)
{
    <p><em>Loading...</em></p>
}
else if (assignments.Any() == false)
{
    <p><em>All done :)</em></p>
}
else
{
    <!--List of tasks-->
    <ul style="padding-left: 0px;">
        @foreach (var item in assignments)
        {
            if (item != null && (hideFinishedTasks == true && item.Status == "done") == false)
            {
                <li style="list-style-type:none; padding-bottom:2px;" @key="item.AssignmentId" tabindex="1">
                    <AssignmentComponent Asgnt="item"
                                         OnRemove="@(()=> RemoveAssignment(item))" OnUpdate="@(()=> UpdateAssignment(item))" />
                </li>
            }
        }
    </ul>

    <!--Option to hide tasks marked as 'done'-->
<div class="input-group mb-3" hidden="@(assignments.Any(x => x.Status == "done") == false)">
    <div class="input-group-prepend">
        <div class="input-group-text">
            <input type="checkbox" @bind-value="hideFinishedTasks">
        </div>
    </div>
    <input type="text" class="form-control border-left-0" value="Hide finished tasks" disabled="disabled">
    <div class="input-group-append">
        <button class="btn btn-outline-secondary border" type="button" @onclick="RemoveAllFinishedTasks">Remove all finished tasks</button>
    </div>
</div>
}


@code {

    List<Assignment> assignments;

    private string newAssignmentText = string.Empty;
    private bool inputIsValid => string.IsNullOrWhiteSpace(newAssignmentText) == false;

    // Init
    protected override void OnParametersSet()
    {
        assignments = AssignmentRepository.GetAll().ToList();
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            textInput.FocusAsync();
        }

    }

    // Hide tasks marked as 'done'
    private bool hideFinishedTasks = false;

    // Add task textbox
    ElementReference textInput;

    // Methods


    private void AddNewAssignment()
    {
        Assignment assignment = new()
        {
            Text = newAssignmentText
        };

        AssignmentRepository.Insert(assignment);
        AssignmentRepository.Save();

        assignments = AssignmentRepository.GetAll().ToList();

        newAssignmentText = string.Empty;

        textInput.FocusAsync();
    }

    private void RemoveAssignment(Assignment assignment)
    {
        AssignmentRepository.Delete(assignment.AssignmentId);
        AssignmentRepository.Save();

        assignments = AssignmentRepository.GetAll().ToList();
    }

    private void UpdateAssignment(Assignment assignment)
    {
        AssignmentRepository.Update(assignment);
        AssignmentRepository.Save();

        assignments = AssignmentRepository.GetAll().ToList();
    }

    private void RemoveAllFinishedTasks()
    {
        AssignmentRepository.DeleteAllFinishedAssignments();
        AssignmentRepository.Save();

        assignments = AssignmentRepository.GetAll().ToList();
    }

    // Keyboard input to add task
    private async Task KeyboardEventHandler(KeyboardEventArgs args)
    {
        switch (args.Key)
        {
            case "Enter":
                if (inputIsValid)
                {
                    AddNewAssignment();
                }
                break;
            default:
                break;
        }
    }
}


